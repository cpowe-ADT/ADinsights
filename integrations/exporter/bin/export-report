#!/usr/bin/env node

const fs = require('fs/promises');
const path = require('path');
const dotenv = require('dotenv');
const { renderReport } = require('../lib/renderReport');
const { renderToFiles } = require('../lib/browser');
const canva = require('../lib/canva');

dotenv.config();

typeof process.stdin.setEncoding === 'function' && process.stdin.setEncoding('utf8');

function parseArgs(argv) {
  const args = {};
  for (let i = 0; i < argv.length; i += 1) {
    const token = argv[i];
    if (token.startsWith('--')) {
      const key = token.slice(2);
      const next = argv[i + 1];
      if (!next || next.startsWith('--')) {
        args[key] = true;
        i -= 1;
      } else {
        args[key] = next;
        i += 1;
      }
    }
  }
  return args;
}

async function loadData(dataPath) {
  const resolvedPath = path.resolve(dataPath);
  const contents = await fs.readFile(resolvedPath, 'utf8');
  return JSON.parse(contents);
}

async function run(cliArgs = process.argv.slice(2)) {
  const args = parseArgs(cliArgs);
  const baseDir = path.join(__dirname, '..');

  const dataPath = args.data || path.join(baseDir, 'examples', 'data.sample.json');
  const pdfPath = args.out || path.join(baseDir, 'out', 'report.pdf');
  const pngPath = args.png || path.join(baseDir, 'out', 'report.png');

  const data = await loadData(dataPath);
  const html = await renderReport(data);

  await renderToFiles(html, { pdfPath, pngPath });

  console.log(`Report generated: ${pdfPath}`);
  if (pngPath) {
    console.log(`Preview image saved: ${pngPath}`);
  }

  await canva.exportDesignStub({ source: pdfPath });
}

if (require.main === module) {
  run().catch((error) => {
    console.error('Failed to export report:', error);
    process.exitCode = 1;
  });
}

module.exports = {
  run,
  canva,
};
