name: CI

on:
  push:
    branches: ["main"]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ads_reporting
          POSTGRES_USER: db_user
          POSTGRES_PASSWORD: db_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U db_user -d ads_reporting" --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      DJANGO_SECRET_KEY: ci-secret-key
      CELERY_BROKER_URL: redis://localhost:6379/0
      CELERY_RESULT_BACKEND: redis://localhost:6379/1
      SECRETS_PROVIDER: env
      KMS_PROVIDER: aws
      KMS_KEY_ID: dummy
      AWS_REGION: us-east-1
      AIRBYTE_API_URL: http://localhost:8001
      AIRBYTE_API_TOKEN: test-token

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Prepare dbt profile
        run: |
          mkdir -p "$HOME/.dbt"
          cp dbt/profiles-example.yml "$HOME/.dbt/profiles.yml"

      - name: Wait for Postgres
        run: |
          python - <<'PY'
          import time
          import psycopg2

          for _ in range(10):
              try:
                  psycopg2.connect(
                      host="localhost",
                      port=5432,
                      user="db_user",
                      password="db_password",
                      dbname="ads_reporting",
                  ).close()
                  break
              except psycopg2.OperationalError:
                  time.sleep(3)
          else:
              raise SystemExit("Postgres service failed to become ready")
          PY

      - name: Run Ruff
        run: ruff check backend

      - name: Run Pytest
        working-directory: backend
        run: pytest

      - name: Run frontend tests
        working-directory: frontend
        env:
          CI: "true"
        run: npm test -- --run

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Install dbt Core + Postgres adapter
        run: |
          python -m pip install --upgrade pip
          python -m pip install --pre "dbt-core==1.10.13" "dbt-postgres==1.10.0b1"

      - name: dbt version
        run: python -m dbt --version

      - name: Run dbt deps
        run: make dbt-deps DBT="python -m dbt --project-dir dbt --profiles-dir $HOME/.dbt"

      - name: Run dbt seed
        run: make dbt-seed DBT="python -m dbt --project-dir dbt --profiles-dir $HOME/.dbt"

      - name: Run dbt staging models
        run: python -m dbt run --project-dir dbt --profiles-dir $HOME/.dbt --select staging
